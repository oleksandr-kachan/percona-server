--source include/have_keyring_vault_plugin.inc
--source include/not_repeat.inc

--let $vault_conf_mount_point_uuid = `SELECT UUID()`

--source parse_combination.inc

--let $conf_file1 = $MYSQLTEST_VARDIR/keyring_vault1.conf
--let $conf_file2 = $MYSQLTEST_VARDIR/keyring_vault2.conf

--let $vault_conf_file = $conf_file1
--let $vault_conf_mount_point_suffix = _1
--source generate_conf_file.inc

--let $vault_conf_file = $conf_file2
--let $vault_conf_mount_point_suffix = _2
--source generate_conf_file.inc

# Actual mount points are needed only when 'secret_mount_point_version' is set to 'AUTO'
# and we try to find it in the list of Vault Server mounts
if ($vault_conf_mount_point_version == AUTO)
{
  --let $mount_point_service_op = CREATE

  --let $vault_conf_mount_point_suffix = _1
  --source mount_point_service.inc

  if (!$vault_conf_mount_point_directory)
  {
    --let $vault_conf_mount_point_suffix = _2
    --source mount_point_service.inc
  }
}

#--source is_vault_server_up.inc

--disable_query_log
call mtr.add_suppression("Plugin keyring_vault reported: 'keyring_vault initialization failure.");
call mtr.add_suppression("Plugin keyring_vault reported: 'Could not open file with credentials.'");
call mtr.add_suppression("Plugin keyring_vault reported: 'File '' not found");
call mtr.add_suppression("Plugin keyring_vault reported: 'There is no vault_ca specified in keyring_vault's configuration file");
--enable_query_log

--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
--error ER_UNKNOWN_SYSTEM_VARIABLE
eval SET @@global.keyring_vault_config='$conf_file1';

--replace_regex /\.dll/.so/
eval INSTALL PLUGIN keyring_vault SONAME '$KEYRING_VAULT_PLUGIN';

--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
eval SET @@global.keyring_vault_config='$conf_file2';
#cleanup
--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
eval SET @@global.keyring_vault_config='$conf_file1';
UNINSTALL PLUGIN keyring_vault;

# Delete mount points
if ($vault_conf_mount_point_version == AUTO)
{
  --let $mount_point_service_op = DELETE

  --let $vault_conf_mount_point_suffix = _1
  --source mount_point_service.inc

  if (!$vault_conf_mount_point_directory)
  {
      --let $vault_conf_mount_point_suffix = _2
      --source mount_point_service.inc
  }
}
